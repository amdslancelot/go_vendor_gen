#!/bin/bash

DEBUG=0
GIT_TAG_NAME=go_vendor_gen_tool-test
GO_COMMAND=$(which go)
#GOMOD_PATH=$1
BUILD_DEV=0


function debug {
  if [[ $DEBUG == 1 ]]
  then
    echo -e $1
  fi
}

function usage() {
  cat <<EOF
Intro:
        go_vendor_gen is a Go Vendor Data Generator Tool.

Usage: 

	go_vendor_gen <tag> ([arguments]


Available options:

        -m, --gomod-path GOMOD_PATH  Specify go.mod file location
        -c, --go-exec-path           Specify go command location
        -d, --debug                  Enable debug log
        -n, --tagname                Customize git tag name to commit
        -b, --dev                    Commit to git and trigger autobuild
        -h, --help                   Print this help and exit
EOF
  exit
}

function check_command_exist {
  if ! command -v $1 &> /dev/null; then
    echo "$1 could not be found"
    exit 1
  fi
}

function get_gomod_go_ver {
  echo $(tail -1 $1 | sed s/go// | sed "s/\s//")
}

function get_sys_go_ver {
  check_command_exist $GO_COMMAND
  echo $(go_ver=$($GO_COMMAND version); go_ver_arr=($go_ver); echo ${go_ver_arr[2]} | sed s/go//)
}

function compare_go_ver {
  gomod_go_ver=$(get_gomod_go_ver $1)
  sys_go_ver=$(get_sys_go_ver)
  sys_go_ver=${sys_go_ver:0:${#gomod_go_ver}}
  [[ $gomod_go_ver == $sys_go_ver ]] && echo true || echo false
}


if [[ $# == 0 ]]; then
  usage
fi


POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -m|--gomod-path)
      GOMOD_PATH=$2
      shift # past argument
      shift # past value
      ;;
    -c|--go-exec-path)
      GO_COMMAND=$2
      shift # past argument
      shift # past value
      ;;
    -d|--debug)
      DEBUG=1
      shift # past argument
      ;;
    -n|--tagname)
      GIT_TAG_NAME=$2
      shift # past argument
      shift # past value
      ;;
    -b|--dev)
      BUILD_DEV=1
      shift # past argument
      ;;
    -h|--help)
      usage
      shift
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
  esac
done





# validation
check_command_exist $GO_COMMAND

# tests
debug $(compare_go_ver $GOMOD_PATH)
sys_go_ver=$(get_sys_go_ver)
debug "go ver: $sys_go_ver"
gomod_go_ver=$(get_gomod_go_ver $GOMOD_PATH)
debug "go mod: $gomod_go_ver"
debug "go ver(short): ${sys_go_ver:0:${#gomod_go_ver}}"

# validation
if ! $(compare_go_ver $GOMOD_PATH); then 
  echo "[ERROR] System go version ($(get_sys_go_ver)) VS Project go.mod go version ($(get_gomod_go_ver $GOMOD_PATH)) not compatible. Vendor data may generated with errors. Cannot proceed."
  exit 1
fi

# Allow vendoring dirs to push into git repo
if [[ -r ./.gitignore ]]; then
  sed -i s@\^vendor\/@\^\#vendor\/@ ./.gitignore
  sed -i s@\^cache@\^\#cache@ ./.gitignore
fi

# Generate vendor data
rm -rf vendor/
http_proxy=http://www-proxy.us.oracle.com:80 https_proxy=http://www-proxy.us.oracle.com:80 $GO_COMMAND mod vendor -v

#####################################
# Commit to GIT and trigger autobuild
#####################################
if [[ ! $BUILD_DEV == 1 ]]; then
  echo "Vendor data generated. Program stopped."
  exit 0
fi

git add --all
git commit -m "update vendoring data with go version $gomod_go_ver"
git push origin :$GIT_TAG_NAME
git tag --delete $GIT_TAG_NAME
git tag -a $GIT_TAG_NAME -m "build-dev"
git push origin $GIT_TAG_NAME

